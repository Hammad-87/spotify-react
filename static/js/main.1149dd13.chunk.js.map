{"version":3,"sources":["serviceWorker.js","Components/NavBar.jsx","API/deezerdevs/search.jsx","Components/Footer.jsx","Components/SingleSong.jsx","Components/SearchResult.jsx","Components/SpotifyHome.jsx","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","state","search","e","setState","searchKeyword","target","value","className","to","data-toggle","data-target","type","aria-controls","aria-expanded","aria-label","id","onKeyUp","this","placeholder","Component","headers","Headers","searchQuery","a","URL","concat","fetch","method","response","ok","json","console","log","Footer","previewSongURL","props","ref","src","controls","autoPlay","volume","SingleSong","song","previewSong","onClick","preview","album","cover_xl","alt","title","artist","name","SearchResult","params","loading","componentDidMount","searchArray","componentDidUpdate","prevProps","pathname","newURL","role","data","length","map","index","key","SpotifyHome","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1149dd13.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavBar extends Component {\r\n  state = {}\r\n  search = (e) => {\r\n    this.setState({\r\n      searchKeyword: e.target.value\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar fixed-top navbar-expand-sm navbar-dark bg-dark\">\r\n        <Link to=\"/\">\r\n          <div\r\n            className=\"navbar-brand\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\".navbar-collapse.show\"\r\n          >FayJu Fy</div>\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            {/* <li\r\n              className=\"nav-item active\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\".navbar-collapse.show\"\r\n            >\r\n              <Link to=\"/movies-in-theater\" className=\"nav-link\" >Movies In Theater</Link>\r\n            </li> */}\r\n          </ul>\r\n          <form className=\"form-inline\">\r\n            <input\r\n              onKeyUp={this.search}\r\n              className=\"form-control mr-sm-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search movies\"\r\n              aria-label=\"Search\">\r\n            </input>\r\n            <Link to={\"/search/\" + this.state.searchKeyword}>\r\n              <button\r\n                className=\"btn btn-outline-success my-2 my-sm-0\"\r\n                type=\"submit\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\".navbar-collapse.show\"\r\n              >\r\n                Search\r\n              </button>\r\n            </Link>\r\n          </form>\r\n        </div>\r\n      </nav >\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;","const headers = new Headers({\r\n    \"x-rapidapi-host\": \"deezerdevs-deezer.p.rapidapi.com\",\r\n    \"x-rapidapi-key\": \"986f49e8damsh99c9341f49f5e58p13eb47jsn7fef840e6245\"\r\n});\r\n\r\n\r\nconst search = async (searchQuery) => {\r\n    let URL = \"https://deezerdevs-deezer.p.rapidapi.com/search?q=\".concat(searchQuery);\r\n        try {\r\n            let response = await fetch(URL, {\r\n                method: \"GET\",\r\n                headers\r\n            })\r\n            if (response.ok) {\r\n                return await response.json()\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n}\r\n\r\nexport default search;","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        let { previewSongURL } = this.props;\r\n        return (\r\n            <footer className=\"navbar fixed-bottom navbar-dark bg-dark row\">\r\n                <audio \r\n                    className=\"col\" \r\n                    ref=\"audio_tag\" \r\n                    src={previewSongURL}\r\n                    controls\r\n                    autoPlay\r\n                    volume='0.5'\r\n                />\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n// import { Link } from \"react-router-dom\";\r\n\r\nclass SingleSong extends Component {\r\n    render() {\r\n        let { song, previewSong } = this.props;\r\n        return (\r\n            \r\n                <div className=\"col-6 col-md-3 col-lg-2\">\r\n                    <div className=\"card px-0 my-2 bg-dark\">\r\n                        <img \r\n                            onClick={() => previewSong(song.preview)}\r\n                            src={song.album.cover_xl} \r\n                            className=\"card-img-top\" \r\n                            alt={song.album.title}>\r\n                        </img>\r\n                        <div className=\"card-body\">\r\n                            <ul className=\"list-group list-group-flush\">\r\n                                <li className=\"list-group-item bg-dark\">{song.artist.name}</li>\r\n                                <li className=\"list-group-item bg-dark\">{song.album.title}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleSong;","import React, { Component } from 'react';\r\nimport search from '../API/deezerdevs/search';\r\nimport Footer from './Footer';\r\nimport SingleSong from \"./SingleSong\";\r\n\r\nclass SearchResult extends Component {\r\n    state = {\r\n        searchQuery: this.props.match.params.searchQuery,\r\n        loading: true,\r\n        previewSongURL: \"\"\r\n    }\r\n    render() {\r\n        let { searchQuery, searchArray, loading, previewSongURL } = this.state;\r\n        if (loading) {\r\n            return (\r\n                <div className=\"spinner-grow\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            )\r\n        } else if (searchArray.data) {\r\n            return (\r\n                <>\r\n                    <h3 className=\"display-4\">Search: {searchQuery}</h3>\r\n                    {searchArray.data.length > 0 &&\r\n                        <div className=\"row\">\r\n                            {searchArray.data.map((song, index) =>\r\n                                <SingleSong song={song} key={index} previewSong={this.previewSong} />\r\n                            )}\r\n                        </div>\r\n                    }\r\n                    <Footer previewSongURL={previewSongURL} />\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        console.log(\"Component Mounted\")\r\n        let searchQuery = this.props.match.params.searchQuery;\r\n        let searchArray = await search(searchQuery);\r\n        this.setState({\r\n            searchArray: searchArray,\r\n            loading: false\r\n        })\r\n    }\r\n    componentDidUpdate = async (prevProps) => {\r\n        if (this.props.location.pathname !== prevProps.location.pathname) {\r\n            this.setState({loading: true});\r\n            let searchQuery = this.props.match.params.searchQuery;\r\n            let searchArray = await search(searchQuery)\r\n            this.setState({\r\n                searchQuery: searchQuery,\r\n                searchArray: searchArray,\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n    previewSong = (newURL) => {\r\n        this.setState({\r\n            previewSongURL: newURL\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default SearchResult;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport NavBar from './NavBar';\r\n\r\nimport SearchResult from './SearchResult';\r\n\r\n\r\nclass SpotifyHome extends Component {\r\n    state = {\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <header className=\"container-fluid\">\r\n                <Router>\r\n                    <NavBar />\r\n                    <Route path=\"/search/:searchQuery\" component={SearchResult} />\r\n                    \r\n                </Router>\r\n            </header>\r\n        );\r\n    }    \r\n}\r\n\r\nexport default SpotifyHome;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SpotifyHome from './Components/SpotifyHome';\n\nReactDOM.render(<SpotifyHome />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}